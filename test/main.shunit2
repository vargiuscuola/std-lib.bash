#!/bin/bash

source "./package.sh"
#package.load "github.com/vargiuscuola/std-lib.bash"
source "./module.sh"
module.import "main"

############
#
# SHOPT
#
############

test_shopt_backup_and_restore() {
  opt1_name=expand_aliases  opt1_val="-s"  opt1_val2="-u"  opt1_cmd="shopt $opt1_val $opt1_name"
  opt2_name=mailwarn        opt2_val="-u"  opt2_val2="-s"  opt2_cmd="shopt $opt2_val $opt2_name"
  $opt1_cmd
  $opt2_cmd
  
  shopt.backup $opt1_name $opt2_name
                                    assertEquals shopt_backup.1    "$opt1_cmd"                       "$( shopt -p $opt1_name )"
                                    assertEquals shopt_backup.2    "$opt2_cmd"                       "$( shopt -p $opt2_name )"
  shopt $opt1_val2 $opt1_name     ; assertEquals shopt_backup.3    "shopt $opt1_val2 $opt1_name"     "$( shopt -p $opt1_name )"
  shopt $opt2_val2 $opt2_name     ; assertEquals shopt_backup.4    "shopt $opt2_val2 $opt2_name"     "$( shopt -p $opt2_name )"
  shopt.restore $opt1_name
                      assertEquals shopt_restore.1  "$opt1_cmd"                    "$( shopt -p $opt1_name )"
                      assertEquals shopt_restore.2  "shopt $opt2_val2 $opt2_name"  "$( shopt -p $opt2_name )"
  shopt.restore $opt2_name
                      assertEquals shopt_restore.3  "$opt1_cmd"                    "$( shopt -p $opt1_name )"
                      assertEquals shopt_restore.4  "$opt2_cmd"                    "$( shopt -p $opt2_name )"
}


############
#
# MAIN
#
############

test_main_dereference-alias_() {
  f1() { :; }
  alias a1="f1 a b c"
  alias a2="a1 d e f"
  alias a3="a2 x"
  main_dereference-alias_ f1       ; assertEquals main_dereference-alias_.1  f1 "$__"
  main_dereference-alias_ f2       ; assertEquals main_dereference-alias_.2  f2 "$__"
  main_dereference-alias_ a1       ; assertEquals main_dereference-alias_.3  f1 "$__"
  main_dereference-alias_ a2       ; assertEquals main_dereference-alias_.4  f1 "$__"
  main_dereference-alias_ a3       ; assertEquals main_dereference-alias_.5  f1 "$__"
}


############
#
# ENV
#
############
test_env_PATH() {
  local BCK_PATH="$PATH" append_path="/tmp/test1" prepend_path="/tmp/test2"
  env_PATH_append-item  "$append_path"   ; assertEquals env_PATH.1  "$BCK_PATH:$append_path"                  "$PATH"
  env_PATH_append-item  "$append_path"   ; assertEquals env_PATH.2  "$BCK_PATH:$append_path"                  "$PATH"
  env_PATH_prepend-item "$prepend_path"  ; assertEquals env_PATH.3  "$prepend_path:$BCK_PATH:$append_path"    "$PATH"
  env_PATH_prepend-item "$prepend_path"  ; assertEquals env_PATH.4  "$prepend_path:$BCK_PATH:$append_path"    "$PATH"
  env_PATH_prepend-item "$append_path"   ; assertEquals env_PATH.5  "$prepend_path:$BCK_PATH:$append_path"    "$PATH"
  env_PATH_append-item  "$prepend_path"  ; assertEquals env_PATH.6  "$prepend_path:$BCK_PATH:$append_path"    "$PATH"
}

############
#
# PROCESS
#
############
test_process_class() {
  process_exists 9999       ; assertFalse process_exists.1 $?
  
  local pid="$( ps -ef -o pid:1= | grep -v $$ | tail -1 )"
  process_is-child "$pid"   ; assertFalse process_child.1  $?
  
  ( sleep 1000 ) &
  local pid=$!
  process_exists "$pid"     ; assertTrue  process_exists.2 $?
  
  process_is-child "$pid"   ; assertTrue  process_child.2  $?

  process_kill "$pid" 0 2   ; assertFalse process_kill.1   $?

  process_kill "$pid"       ; assertTrue  process_kill.2   $?
  process_exists "$pid"     ; assertFalse process_exists.3 $?
}


test_file_class() {
  file_mkfifo_
  [ -p "$__" ]              ; assertTrue file_mkfifo.1     $?
}

test_var_class() {
  local var
  var_assign var echo -n ""                        ; assertEquals var_assign.1  ""      "$var"
  var_assign var echo "ok x"                       ; assertEquals var_assign.2  "ok x"  "$var"
  declare -g var__gvar
  var_assign var__gvar echo -e "linea1\nlinea2"    ; assertEquals var_assign.3  linea1  "$var__gvar"
  var_assign var true                              ; assertTrue   var_assign.4  "$?"
  var_assign var false                             ; assertFalse  var_assign.5  "$?"

  var_is-set var2                                  ; assertFalse  var_is-set.1  "$?"
  local var2=""
  var_is-set var2                                  ; assertTrue   var_is-set.2  "$?"
  var2="x"
  var_is-set var2                                  ; assertTrue   var_is-set.3  "$?"
  
  var_first-defined_  var_a var_b var_c            ; assertFalse  var_defined_.1         "$?"
  var_first-defined_  var_a var_b var_c            ; assertEquals var_defined_.2         "$__" ""
  var_first-not-null_ var_a var_b var_c            ; assertFalse  var_first-not-null_.1  "$?"
  var_first-not-null_ var_a var_b var_c            ; assertEquals var_first-not-null_.2  "$__" ""
  local var_b
  var_first-defined_ var_a var_b var_c             ; assertTrue   var_defined_.3         "$?"
  var_first-defined_ var_a var_b var_c             ; assertEquals var_defined_.4         "$__" ""
  var_first-not-null_ var_a var_b var_c            ; assertFalse  var_first-not-null_.3  "$?"
  var_first-not-null_ var_a var_b var_c            ; assertEquals var_first-not-null_.4  "$__" ""
  local var_c=valc
  var_first-defined_ var_a var_b var_c             ; assertTrue   var_defined_.5         "$?"
  var_first-defined_ var_a var_b var_c             ; assertEquals var_defined_.6         "$__" ""
  var_first-not-null_ var_a var_b var_c            ; assertTrue   var_first-not-null_.5  "$?"
  var_first-not-null_ var_a var_b var_c            ; assertEquals var_first-not-null_.6  "$__" "valc"
  local var_a=vala
  var_first-defined_ var_a var_b var_c             ; assertEquals var_defined_.7         "$__" "vala"
  var_first-not-null_ var_a var_b var_c            ; assertEquals var_first-not-null_.7  "$__" "vala"
  unset var_b
  unset var_a
  var_first-defined_ var_a var_b var_c             ; assertEquals var_defined_.8         "$__" "valc"
  var_first-not-null_ var_a var_b var_c            ; assertEquals var_first-not-null_.8  "$__" "valc"


}

test_command_class() {
  command_stdout_ echo -n ""                  ; assertEquals command_stdout_.1  ""      "$__"
  command_stdout_ echo "ok x"                 ; assertEquals command_stdout_.2  "ok x"  "$__"
  command_stdout_ echo -e "linea1\nlinea2"    ; assertEquals command_stdout_.3  linea1  "$__"
  command_stdout_ true                        ; assertTrue   command_stdout_.4  "$?"
  command_stdout_ false                       ; assertFalse  command_stdout_.5  "$?"
}

test_settings_class() {
  settings.is-enabled  settingx                ; assertFalse  settings_is-enabled.1  "$?"
  settings_is-disabled settingx                ; assertFalse  settings_is-disabled.1 "$?"
  settings.enable      settingx
  settings.is-enabled  settingx                ; assertTrue   settings_is-enabled.2  "$?"
  settings_is-disabled settingx                ; assertFalse  settings_is-disabled.2 "$?"
  settings.disable     settingx
  settings.is-enabled  settingx                ; assertFalse  settings_is-enabled.3  "$?"
  settings_is-disabled settingx                ; assertTrue   settings_is-disabled.3 "$?"
  settings.set         settingx valx
  settings.get_        settingx                ; assertEquals settings_get_.1        "$__" valx
  settings.is-enabled  settingx                ; assertFalse  settings_is-enabled.4  "$?"
  settings_is-disabled settingx                ; assertFalse  settings_is-disabled.4 "$?"
}

source /opt/shunit2/shunit2
