#!/bin/bash

source "./package.sh"
#package.load "github.com/vargiuscuola/std-lib.bash"
source "./module.sh"
module.import "lock"
module.import "/opt/stub.sh/stub.sh"

test_lock() {
  # reset previous runs
  unset rm
  lock_cleanup
  lock_kill "lock 1"
  
  # no locks
  lock_list_                       ; assertEquals lock.1.1    0      "${#__a[@]}"
  lock_is-active                   ; assertFalse  lock.1.2    $?
  lock_is-active "lock 1"          ; assertFalse  lock.1.3    $?
  lock_is-mine                     ; assertFalse  lock.1.4    $?
  lock_is-mine "lock 1"            ; assertFalse  lock.1.5    $?
  
  # new default lock
  lock_new                         ; assertTrue   lock.2.1    $?
  lock_list_                       ; assertEquals lock.2.2    1      "${#__a[@]}"
  lock_is-active                   ; assertTrue   lock.2.3    $?
  lock_is-active "lock 1"          ; assertFalse  lock.2.4    $?
  lock_is-mine                     ; assertTrue   lock.2.5    $?
  lock_is-mine "lock 1"            ; assertFalse  lock.2.6    $?

  # new lock "lock 1" in subshell
  ( lock_new )                     ; assertFalse  lock.3.1    $?
  ( lock_new "lock 1" ; sleep 1000 ) &
  local subshell_pid=$!
  sleep 0.1
  lock_list_                       ; assertEquals lock.3.2    1      "${#__a[@]}"
  lock_list_ ""                    ; assertEquals lock.3.3    2      "${#__a[@]}"
  lock_list_ "$subshell_pid"       ; assertEquals lock.3.4    1      "${#__a[@]}"
  lock_is-active "lock 1"          ; assertTrue   lock.3.5    $?
  lock_is-mine "lock 1"            ; assertFalse  lock.3.6    $?

  # try to get "lock 1"
  lock_new "lock 1"                ; assertFalse  lock.4.1    $?
  lock_new "lock 1" 1              ; assertFalse  lock.4.2    $?
  lock_new "lock 1" 1 1000         ; assertFalse  lock.4.3    $?
  lock_new "lock 1" 0  0           ; assertTrue  lock.4.4     $?
  lock_list_                       ; assertEquals lock.4.5    2      "${#__a[@]}"
  lock_is-active "lock 1"          ; assertTrue   lock.4.6    $?
  lock_is-mine "lock 1"            ; assertTrue   lock.4.7    $?
  test -e "/proc/$subshell_pid"    ; assertFalse  lock.4.8    $?

  # release default lock
  lock_release "lock 1"            ; assertTrue   lock.5.1    $?
  lock_list_                       ; assertEquals lock.5.2    1      "${#__a[@]}"
  stub_and_eval rm "return 1"
  lock_release                     ; assertFalse  lock.5.3    $?
  lock_list_                       ; assertEquals lock.5.4    1      "${#__a[@]}"
  restore rm

  # kill subshell (if still running)
  kill -TERM "$subshell_pid" &>/dev/null || true
  
  # again "lock 1" lock in subshell
  ( lock_new "lock 1" ; sleep 1000 ) &
  local subshell_pid=$!
  sleep 0.1
  
  # lock kill
  lock_list_ ""                    ; assertEquals lock.6.1    2      "${#__a[@]}"
  lock_kill "lock 1"
  lock_list_ ""                    ; assertEquals lock.6.2    1      "${#__a[@]}"
  
  # kill subshell (if still running)
  kill -TERM "$subshell_pid" &>/dev/null || true
}

source /opt/shunit2/shunit2